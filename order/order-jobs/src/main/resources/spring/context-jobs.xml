<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.junbo.order.jobs"/>

    <!-- Order Scheduler -->
    <bean id="orderSchedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
          parent="baseJobScheduler">
        <property name="schedulerName" value="orderScheduler" />
        <property name="autoStartup" value="${order.jobs.scheduler.start}" />
        <property name="triggers">
            <list>
                <!-- <ref bean="orderJobTrigger"/>  no functions needs order job, disable for now-->
                <ref bean="subledgerJobTrigger"/>
                <ref bean="payoutExportJobTrigger"/>
                <ref bean="payoutUpdateJobTrigger"/>
                <ref bean="orderAuditTaxJobTrigger"/>
                <ref bean="payoutUpdateJobTrigger"/>
            </list>
        </property>
        <property name="quartzProperties">
            <map>
                <entry key="org.quartz.scheduler.jmx.export" value="true"/>
                <entry key="org.quartz.scheduler.jmx.objectName" value="quartz:type=QuartzScheduler,name=orderScheduler"/>
            </map>
        </property>
    </bean>

    <!-- Order Job Trigger -->
    <bean id="orderJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean" >
        <property name="jobDetail" ref="orderJobDetail" />
        <property name="cronExpression" value="${order.jobs.orderjob.cronexpression}" />
    </bean>

    <bean id="orderAuditTaxJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean" >
        <property name="jobDetail" ref="orderAuditTaxJobDetail" />
        <property name="cronExpression" value="${order.jobs.orderjob.cronexpression}" />
    </bean>
    <!-- Order Job -->
    <bean id="orderJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.junbo.common.util.LazyInitProxyFactoryBean">
                <property name="targetBeanName">
                    <idref bean="orderJob"/>
                </property>
            </bean>
        </property>
        <property name="targetMethod" value="execute" />
        <property name="concurrent" value="false"/>
    </bean>

    <bean id="orderAuditTaxJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.junbo.common.util.LazyInitProxyFactoryBean">
                <property name="targetBeanName">
                    <idref bean="orderAuditTaxJob"/>
                </property>
            </bean>
        </property>
        <property name="targetMethod" value="execute" />
        <property name="concurrent" value="false"/>
    </bean>

    <!-- Subledger Job & Trigger-->
    <bean id="subledgerJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean" >
        <property name="jobDetail" ref="subledgerJobDetail" />
        <property name="cronExpression" value="${order.jobs.subledger.cronexpression}" />
    </bean>

    <bean id="subledgerJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.junbo.common.util.LazyInitProxyFactoryBean">
                <property name="targetBeanName">
                    <idref bean="subledgerAggregator"/>
                </property>
            </bean>
        </property>
        <property name="targetMethod" value="aggregateSubledger" />
        <property name="concurrent" value="false"/>
    </bean>

    <!-- Payout export Job & Trigger-->
    <bean id="payoutExportJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean" >
        <property name="jobDetail" ref="payoutExportJobDetails" />
        <property name="cronExpression" value="${order.jobs.payout.export.cronexpression}" />
        <property name="timeZone" value="GMT" />
    </bean>

    <bean id="payoutExportJobDetails" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.junbo.common.util.LazyInitProxyFactoryBean">
                <property name="targetBeanName">
                    <idref bean="order.payoutExportJob"/>
                </property>
            </bean>
        </property>
        <property name="targetMethod" value="exportAndUploadDaily" />
        <property name="concurrent" value="false"/>
    </bean>

    <!-- Payout update Job & Trigger-->
    <bean id="payoutUpdateJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean" >
        <property name="jobDetail" ref="payoutUpdateJobDetails" />
        <property name="cronExpression" value="${order.jobs.payout.update.cronexpression}" />
    </bean>

    <bean id="payoutUpdateJobDetails" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="com.junbo.common.util.LazyInitProxyFactoryBean">
                <property name="targetBeanName">
                    <idref bean="order.payoutUpdateJob"/>
                </property>
            </bean>
        </property>
        <property name="targetMethod" value="execute" />
        <property name="concurrent" value="false"/>
    </bean>

    <bean id="orderJob" class="com.junbo.order.jobs.OrderJob" >
        <property name="threadPoolTaskExecutor" ref="orderJobAsyncTaskExecutor"/>
        <property name="orderProcessor" ref="orderChargeProcessor"/>
        <property name="orderRepository" ref="orderRepositoryFacade"/>
        <property name="statusToProcess">
            <list>
                <value>PENDING</value>
            </list>
        </property>
        <property name="numOfFuturesToTrack" value="10000"/>
        <property name="pageSizePerShard" value="${order.jobs.pagesize}"/>
        <property name="orderProcessNumLimit" value="${order.jobs.order.process.limit}"/>
    </bean>

    <bean id="orderAuditTaxJob" class="com.junbo.order.jobs.tax.TaxAuditor" >
        <property name="isEnabled" value="${sabrix.tax.audit.enabled}"/>
        <property name="threadPoolTaskExecutor" ref="orderJobAsyncTaskExecutor"/>
        <property name="orderRepository" ref="orderRepositoryFacade"/>
        <property name="statusToProcess">
            <list>
                <value>COMPLETED</value>
                <value>REFUNDED</value>
            </list>
        </property>
        <property name="numOfFuturesToTrack" value="10000"/>
        <property name="pageSizePerShard" value="${order.jobs.pagesize}"/>
        <property name="orderProcessNumLimit" value="${order.jobs.order.process.limit}"/>
    </bean>

    <bean id="orderJobAsyncTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="${order.jobs.order.process.poolsize}" />
        <property name="maxPoolSize" value="${order.jobs.order.process.poolsize}" />
        <property name="queueCapacity" value="1000" />
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy"/>
        </property>
    </bean>

    <bean id="payoutExportJobAsyncTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="${order.jobs.order.process.poolsize}" />
        <property name="maxPoolSize" value="${order.jobs.order.process.poolsize}" />
        <property name="queueCapacity" value="0" />
    </bean>

    <bean id="payoutUpdateJobAsyncTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="${order.jobs.order.process.poolsize}" />
        <property name="maxPoolSize" value="${order.jobs.order.process.poolsize}" />
        <property name="queueCapacity" value="0" />
    </bean>

    <!-- Exporter -->
    <bean id="orderMbeanExporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
        <property name="beans">
            <map>
                <entry key="quartz:type=QuartzJob,name=orderAuditTaxJob">
                    <idref bean="orderAuditTaxJob"/>
                </entry>
                <entry key="quartz:type=QuartzJob,name=payoutExportJob">
                    <idref bean="order.payoutExportJob"/>
                </entry>
                <entry key="quartz:type=QuartzJob,name=payoutUpdateJob">
                    <idref bean="order.payoutUpdateJob"/>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="subledgerPayoutFTPUtils" class="com.junbo.order.jobs.utils.ftp.FTPUtils">
        <property name="host" value="${order.jobs.subledger.ftp.host}"/>
        <property name="port" value="${order.jobs.subledger.ftp.port}"/>
        <property name="user" value="${order.jobs.subledger.ftp.user}"/>
        <property name="password" value="${order.jobs.subledger.ftp.password}"/>
    </bean>

</beans>