<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       ">

    <bean id="shardingDataSource" class="com.junbo.sharding.pool.JunboShardMultiTenantConnectionProviderFactoryBean">
        <property name="jdbcUrls" value="${sharding.db.jdbcUrls}"/>

        <property name="uniqueName" value="jdbc/sharding"/>
        <property name="className" value="${sharding.db.driverClassName}"/>
        <property name="minPoolSize" value="${sharding.db.minPoolSize}"/>
        <property name="maxPoolSize" value="${sharding.db.maxPoolSize}"/>
        <property name="connectionTimeout" value="${common.db.connectionTimeout}"/>

        <property name="driverProperties">
            <props>
                <prop key="user">${sharding.db.username}</prop>
                <prop key="password">${sharding.db.password}</prop>
            </props>
        </property>
    </bean>

    <bean id="shardingSessionFactory" class="com.junbo.sharding.hibernate.LocalSessionFactoryWithListenerBean">
        <property name="jtaTransactionManager" ref="transactionManager"/>
        <property name="hibernateProperties">
            <map>
                <entry key="hibernate.dialect" value="${sharding.hibernate.dialect}"/>
                <entry key="hibernate.max_fetch_depth" value="${sharding.hibernate.max_fetch_depth}"/>
                <entry key="hibernate.jdbc.fetch_size" value="${sharding.hibernate.jdbc.fetch_size}"/>
                <entry key="hibernate.jdbc.batch_size" value="${sharding.hibernate.jdbc.batch_size}"/>
                <entry key="hibernate.show_sql" value="${sharding.hibernate.show_sql}"/>

                <entry key="hibernate.multiTenancy" value="SCHEMA"/>
                <entry key="hibernate.current_session_context_class" value="com.junbo.sharding.hibernate.MultiTenantJTASessionContext"/>
                <entry key="hibernate.tenant_identifier_resolver" value="com.junbo.sharding.hibernate.ShardCurrentTenantIdentifierResolver"/>
                <entry key="hibernate.multi_tenant_connection_provider" value-ref="shardingDataSource"/>
                <entry key="hibernate.temp.use_jdbc_metadata_defaults" value="false"/>
            </map>
        </property>
    </bean>


    <!-- Id generate -->
    <!-- In id generator, we will have three implementation methods: -->
    <!-- 1: Time based id generator, it will use 64 bits -->
    <!-- 0 1 2 3 4 5 ...9 10 11 ... 19 20 21 22 .. 30 31 32 ... 62 63-->
    <!-- [shardId(0 - 9 bits)] [localCounter(10 - 19 bits)] [globalCounter{20 - 31 bits)] [DateTime(32 - 62 bits)] [FlagField(63 bits)] -->

    <!-- 2: Id generator proposed by oculus rift, it will use 48 bits -->
    <!-- CCCC CCCC CCCC CCCC CCCC CCCC CCCC CCCC CCSS SSSS SSDD DDVV -->
    <!-- •	C is 34 bits of shuffled sequential ID
         •	S is 8 bits of shard ID
         •	D is 4 bits of data-center ID
         •	V is the ID version (hard coded 0)
         •	V is the least significant bits (hard coded 0 to indicate positive)
    -->

    <!-- 3: order Id generator proposed by oculus rift, it will use 40 bits -->
    <!-- 0CCC CCCC CCCC CCCC CCCC CCCC CCSS SSSS SSDD DDVV -->
    <!-- •	C is 25 bits of shuffled sequential ID
         •	S is 8 bits of shard ID
         •	D is 4 bits of data-center ID
         •	V is the ID version (hard coded 00)
         •	V is the least significant bits
    -->

    <!-- 1: Time based id generator (Using 64 bits) -->
    <!-- All those configurations will be replaced in future configurationData -->
    <!-- Deleted, not used by Oculus
    <bean id="idSchema" class="com.junbo.sharding.id.impl.IdSchema">
        <constructor-arg name="optionMode" value="1" />
        <constructor-arg name="bitsInTime" value="${sharding.sharding.bitsInTime}"/>
        <constructor-arg name="timeSecOffset" value="${sharding.sharding.timeSecOffset}"/>
        <constructor-arg name="bitsInGlobalCounter" value="${sharding.sharding.bitsInGlobalCounter}"/>
        <constructor-arg name="bitsInLocalCounter" value="${sharding.sharding.bitsInLocalCounter}"/>
        <constructor-arg name="numberOfShards" value="${sharding.sharding.numberOfShards}"/>
    </bean>
    <bean id="timeGenerator" class="com.junbo.sharding.id.impl.TimeGeneratorImpl" />

    <bean id="connectionFactoryBuilder" class="net.spy.memcached.ConnectionFactoryBuilder">
        <property name="protocol" value="BINARY"/>
        <property name="opTimeout" value="${sharding.memcached.operationTimeout}"/>
    </bean>
    <bean id="idGeneratorClient" class="com.junbo.common.memcached.MemcachedClientFactoryBean">
        <property name="connectionFactoryBuilder" ref="connectionFactoryBuilder"/>
        <property name="servers" value="${sharding.memcached.servers}"/>
    </bean>

    <bean id="globalCounterInMemory" class="com.junbo.sharding.id.impl.GlobalCounterInMemoryImpl" />
    <bean id="globalCounterMemcached" class="com.junbo.sharding.id.impl.GlobalCounterMemcachedImpl">
        <constructor-arg ref="idGeneratorClient" />
        <constructor-arg value="${sharding.memcached.secondsToTrack}" />
    </bean>
    <bean id="idGenerator" class="com.junbo.sharding.id.impl.IdGeneratorImpl">
        <constructor-arg ref="idSchema" />
        <constructor-arg ref="timeGenerator" />
        <constructor-arg ref="${sharding.memcached.globalCounter}" />
    </bean>
    -->

    <!-- The below is the Oculus requirement -->
    <bean id="oculus48IdGenerator" class="com.junbo.sharding.id.oculus.OculusIdGeneratorImpl">
        <constructor-arg ref="oculus48IdSchema" />
        <constructor-arg ref="globalCounterInDB" />
    </bean>

    <bean id="oculus40IdGenerator" class="com.junbo.sharding.id.oculus.OculusIdGeneratorImpl">
        <constructor-arg ref="oculus40IdSchema" />
        <constructor-arg ref="globalCounterInDB" />
    </bean>

    <bean id="globalCounterInDB" class="com.junbo.sharding.id.oculus.OculusGlobalCounterInDBImpl">
        <property name="shardAlgorithm" ref="userShardAlgorithm" />
        <property name="sessionFactory" ref="shardingSessionFactory" />
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <!-- 2: Id generator proposed by oculus rift (Using 48 bits) -->
    <bean id="oculus48IdSchema" class="com.junbo.sharding.id.oculus.OculusIdSchema">
        <constructor-arg name="idType" value="2" />
        <constructor-arg name="dataCenter" value="${datacenter}" />
        <constructor-arg name="bitsInDataCenterId" value="${sharding.oculus48.sharding.bitsInDataCenterId}" />
        <constructor-arg name="bitsInGlobalCounter" value="${sharding.oculus48.sharding.bitsInGlobalCounter}" />
        <constructor-arg name="bitsInLocalCounter" value="${sharding.oculus48.sharding.bitsInLocalCounter}" />
        <constructor-arg name="idVersion" value="${sharding.oculus48.sharding.idVersion}" />
        <constructor-arg name="bitsInIdVersion" value="${sharding.oculus48.sharding.bitsInIdVersion}" />
        <constructor-arg name="bitsInShardParam" value="${sharding.oculus48.sharding.bitsInShardParam}" />
    </bean>

    <!-- 3: OrderId generator propsed by oculus rift (Using 40 bits) -->
    <bean id="oculus40IdSchema" class="com.junbo.sharding.id.oculus.OculusIdSchema">
        <constructor-arg name="idType" value="3" />
        <constructor-arg name="dataCenter" value="${datacenter}" />
        <constructor-arg name="bitsInDataCenterId" value="${sharding.oculus40.sharding.bitsInDataCenterId}" />
        <constructor-arg name="bitsInGlobalCounter" value="${sharding.oculus40.sharding.bitsInGlobalCounter}" />
        <constructor-arg name="bitsInLocalCounter" value="${sharding.oculus40.sharding.bitsInLocalCounter}" />
        <constructor-arg name="idVersion" value="${sharding.oculus40.sharding.idVersion}" />
        <constructor-arg name="bitsInIdVersion" value="${sharding.oculus40.sharding.bitsInIdVersion}" />
        <constructor-arg name="bitsInShardParam" value="${sharding.oculus40.sharding.bitsInShardParam}" />
    </bean>

    <bean id="idGeneratorFacade" class="com.junbo.sharding.IdGeneratorFacadeImpl">
        <constructor-arg name="map">
            <map>
                <entry key="com.junbo.common.id.OrderId" value-ref="oculus40IdGenerator" />
            </map>
        </constructor-arg>
        <constructor-arg name="idGenerator" ref="oculus48IdGenerator" />
    </bean>

    <bean id="userShardAlgorithm" class="com.junbo.sharding.DefaultShardAlgorithm" />

    <bean id="externalShardAlgorithm" class="com.junbo.sharding.DefaultShardByHashAlgorithm" />

    <bean id="indexDataSource" class="com.junbo.sharding.pool.JunboShardMultiTenantConnectionProviderFactoryBean">
        <property name="jdbcUrls" value="${index.db.jdbcUrls}"/>

        <property name="uniqueName" value="jdbc/index"/>
        <property name="className" value="${index.db.driverClassName}"/>
        <property name="minPoolSize" value="${index.db.minPoolSize}"/>
        <property name="maxPoolSize" value="${index.db.maxPoolSize}"/>
        <property name="connectionTimeout" value="${common.db.connectionTimeout}"/>
        <property name="driverProperties">
            <props>
                <prop key="user">${index.db.username}</prop>
                <prop key="password">${index.db.password}</prop>
            </props>
        </property>
    </bean>

    <bean id="indexSessionFactory" class="com.junbo.sharding.hibernate.LocalSessionFactoryWithListenerBean">
        <property name="jtaTransactionManager" ref="transactionManager"/>
        <property name="hibernateProperties">
            <map>
                <entry key="hibernate.dialect" value="${sharding.hibernate.dialect}"/>
                <entry key="hibernate.max_fetch_depth" value="${sharding.hibernate.max_fetch_depth}"/>
                <entry key="hibernate.jdbc.fetch_size" value="${sharding.hibernate.jdbc.fetch_size}"/>
                <entry key="hibernate.jdbc.batch_size" value="${sharding.hibernate.jdbc.batch_size}"/>
                <entry key="hibernate.show_sql" value="${sharding.hibernate.show_sql}"/>

                <entry key="hibernate.multiTenancy" value="SCHEMA"/>
                <entry key="hibernate.current_session_context_class" value="com.junbo.sharding.hibernate.MultiTenantJTASessionContext"/>
                <entry key="hibernate.tenant_identifier_resolver" value="com.junbo.sharding.hibernate.ShardCurrentTenantIdentifierResolver"/>
                <entry key="hibernate.multi_tenant_connection_provider" value-ref="indexDataSource"/>
                <entry key="hibernate.temp.use_jdbc_metadata_defaults" value="false"/>
            </map>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.junbo.common.health.ping</value>
            </list>
        </property>
    </bean>

    <bean id="sqlDataSourceConnectionInfoProvider" class="com.junbo.sharding.health.SqlDataSourceConnectionInfoProvider"/>
</beans>
