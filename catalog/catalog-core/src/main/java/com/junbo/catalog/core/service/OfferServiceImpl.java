/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (C) 2014 Junbo and/or its affiliates. All rights reserved.
 */

package com.junbo.catalog.core.service;

import com.junbo.catalog.core.OfferService;
import com.junbo.catalog.db.repo.OfferRepository;
import com.junbo.catalog.db.repo.OfferRevisionRepository;
import com.junbo.catalog.spec.model.offer.Offer;
import com.junbo.catalog.spec.model.offer.OfferRevision;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * Offer service implementation.
 */
public class OfferServiceImpl extends BaseRevisionedServiceImpl<Offer, OfferRevision> implements OfferService {
    @Autowired
    private OfferRepository offerRepo;
    @Autowired
    private OfferRevisionRepository offerRevisionRepo;

    @Override
    protected OfferRepository getEntityRepo() {
        return offerRepo;
    }

    @Override
    protected OfferRevisionRepository getRevisionRepo() {
        return offerRevisionRepo;
    }

    @Override
    protected String getRevisionType() {
        return "offer-revision";
    }

    @Override
    protected String getEntityType() {
        return "offer";
    }

    private void validateOffer(Offer offer) {
        //checkFieldNotEmpty(offer.getName(), "name");
        //checkFieldNotNull(offer.getOwnerId(), "developer");
    }

    /*@Autowired
    private OfferRepository offerRepository;
    @Autowired
    private OfferDraftRepository offerDraftRepository;
    @Autowired
    private ItemService itemService;
    @Autowired
    private PriceTierService priceTierService;

    @Override
    public OfferRepository getEntityRepo() {
        return offerRepository;
    }

    @Override
    public OfferDraftRepository getEntityDraftRepo() {
        return offerDraftRepository;
    }

    @Override
    public Offer create(Offer offer) {
        validateOffer(offer);
        checkPrice(offer);
        generateDownloadEntitlement(offer);

        return super.create(offer);
    }

    @Override
    public Offer update(Long offerId, Offer offer) {
        validateId(offerId, offer);
        checkPrice(offer);
        generateDownloadEntitlement(offer);

        return updateEntity(offerId, offer);
    }

    private void validateOffer(Offer offer) {
        checkFieldNotEmpty(offer.getName(), "name");
        checkFieldNotNull(offer.getOwnerId(), "developer");
    }

    private void checkPrice(Offer offer) {
        if (PriceType.TIER_PRICING.equalsIgnoreCase(offer.getPriceType())) {
            PriceTier priceTier = priceTierService.getPriceTier(offer.getPriceTier());
            offer.setPrices(priceTier.getPrices());
        } else if (PriceType.FREE.equalsIgnoreCase(offer.getPriceType())) {
            offer.setPriceTier(null);
            offer.setPrices(null);
        }
    }

    private Event preparePurchaseEvent(Offer offer) {
        if (offer.getEvents()==null) {
            offer.setEvents(new ArrayList<Event>());
        }
        for (Event event : offer.getEvents()) {
            if (EventType.PURCHASE.equalsIgnoreCase(event.getName())) {
                return event;
            }
        }

        Event event = new Event();
        event.setName(EventType.PURCHASE);
        event.setActions(new ArrayList<Action>());
        offer.getEvents().add(event);

        return event;
    }

    private void removeAutoGeneratedActions(Event purchaseEvent) {
        List<Action> autoGeneratedActions = new ArrayList<>();
        for (Action action : purchaseEvent.getActions()) {
            if (Boolean.TRUE.equals(action.isAutoGenerated())) {
                autoGeneratedActions.add(action);
            }
        }
        purchaseEvent.getActions().removeAll(autoGeneratedActions);
    }

    private void generateDownloadEntitlement(Offer offer) {
        Event purchaseEvent = preparePurchaseEvent(offer);
        removeAutoGeneratedActions(purchaseEvent);

        for (ItemEntry itemEntry : offer.getItems()) {
            Item item = itemService.get(itemEntry.getItemId(), EntityGetOptions.getDefault());
            if (ItemType.APP.equalsIgnoreCase(item.getType())) {
                Action action = new Action();
                action.setAutoGenerated(true);
                action.setType(ActionType.GRANT_ENTITLEMENT);
                action.setEntitlementDefId(item.getEntitlementDefId());
                purchaseEvent.getActions().add(action);
            }
        }
    }

    @Override
    protected String getEntityType() {
        return "Offer";
    }*/
}
