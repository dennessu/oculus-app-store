<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       ">
    <context:annotation-config />
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <import resource="classpath*:spring/transaction.xml"/>
    <import resource="classpath*:spring/sharding-context.xml"/>

    <!-- Email source -->
    <bean id="emailDataSource" class="com.junbo.sharding.hibernate.ShardMultiTenantConnectionProviderFactoryBean">
        <property name="jdbcUrls" value="${email.db.jdbcUrls}"/>

        <property name="uniqueName" value="jdbc/email"/>
        <property name="className" value="${email.db.driverClassName}"/>
        <property name="minPoolSize" value="${email.db.minConnectionsPerPartition}"/>
        <property name="maxPoolSize" value="${email.db.maxConnectionsPerPartition}"/>
        <property name="driverProperties">
            <props>
                <prop key="user">${email.db.username}</prop>
                <prop key="password">${email.db.password}</prop>
            </props>
        </property>
    </bean>

    <bean id="emailSessionFactory" class="com.junbo.sharding.hibernate.LocalSessionFactoryWithListenerBean">
        <property name="jtaTransactionManager" ref="transactionManager"/>
        <property name="hibernateProperties">
            <map>
                <entry key="hibernate.dialect" value="${sharding.hibernate.dialect}"/>
                <entry key="hibernate.max_fetch_depth" value="${sharding.hibernate.max_fetch_depth}"/>
                <entry key="hibernate.jdbc.fetch_size" value="${sharding.hibernate.jdbc.fetch_size}"/>
                <entry key="hibernate.jdbc.batch_size" value="${sharding.hibernate.jdbc.batch_size}"/>
                <entry key="hibernate.show_sql" value="${sharding.hibernate.show_sql}"/>

                <entry key="hibernate.multiTenancy" value="SCHEMA"/>
                <entry key="hibernate.current_session_context_class" value="com.junbo.sharding.hibernate.MultiTenantJTASessionContext"/>
                <entry key="hibernate.tenant_identifier_resolver" value="com.junbo.sharding.hibernate.ShardCurrentTenantIdentifierResolver"/>
                <entry key="hibernate.multi_tenant_connection_provider" value-ref="emailDataSource"/>
                <entry key="hibernate.temp.use_jdbc_metadata_defaults" value="false"/>
            </map>
        </property>
        <property name="packagesToScan" value="com.junbo.email.db.entity"/>
    </bean>

    <!-- Email template source -->
    <bean id="emailTemplateSource" class="com.junbo.sharding.hibernate.ShardMultiTenantConnectionProviderFactoryBean">
        <property name="jdbcUrls" value="${config.db.jdbcUrls}"/>

        <property name="uniqueName" value="jdbc/emailconfig"/>
        <property name="className" value="${config.db.driverClassName}"/>
        <property name="minPoolSize" value="${config.db.minPoolSize}"/>
        <property name="maxPoolSize" value="${config.db.maxPoolSize}"/>
        <property name="driverProperties">
            <props>
                <prop key="user">${config.db.username}</prop>
                <prop key="password">${config.db.password}</prop>
            </props>
        </property>
    </bean>

    <bean id="emailTemplateSessionFactory" class="com.junbo.sharding.hibernate.LocalSessionFactoryWithListenerBean">
        <property name="jtaTransactionManager" ref="transactionManager"/>
        <property name="hibernateProperties">
            <map>
                <entry key="hibernate.dialect" value="${sharding.hibernate.dialect}"/>
                <entry key="hibernate.max_fetch_depth" value="${sharding.hibernate.max_fetch_depth}"/>
                <entry key="hibernate.jdbc.fetch_size" value="${sharding.hibernate.jdbc.fetch_size}"/>
                <entry key="hibernate.jdbc.batch_size" value="${sharding.hibernate.jdbc.batch_size}"/>
                <entry key="hibernate.show_sql" value="${sharding.hibernate.show_sql}"/>

                <entry key="hibernate.multiTenancy" value="SCHEMA"/>
                <entry key="hibernate.current_session_context_class" value="com.junbo.sharding.hibernate.MultiTenantJTASessionContext"/>
                <entry key="hibernate.tenant_identifier_resolver" value="com.junbo.sharding.hibernate.ShardCurrentTenantIdentifierResolver"/>
                <entry key="hibernate.multi_tenant_connection_provider" value-ref="emailTemplateSource"/>
                <entry key="hibernate.temp.use_jdbc_metadata_defaults" value="false"/>
            </map>
        </property>
        <property name="packagesToScan" value="com.junbo.email.db.entity"/>
    </bean>

    <!-- Dao -->
    <bean id="emailBaseDao" class="com.junbo.email.db.dao.impl.BaseDaoImpl" abstract="true">
        <property name="sessionFactory" ref="emailSessionFactory"/>
        <property name="shardAlgorithm" ref="userShardAlgorithm"/>
    </bean>
    <bean id="emailHistoryDao" class="com.junbo.email.db.dao.impl.EmailHistoryDaoImpl" parent="emailBaseDao">
        <property name="entityType" value="com.junbo.email.db.entity.EmailHistoryEntity"/>
    </bean>
    <bean id="emailScheduleDao" class="com.junbo.email.db.dao.impl.EmailScheduleDaoImpl" parent="emailBaseDao">
        <property name="entityType" value="com.junbo.email.db.entity.EmailScheduleEntity"/>
    </bean>
    <bean id="emailTemplateDao" class="com.junbo.email.db.dao.impl.EmailTemplateDaoImpl">
        <property name="sessionFactory" ref="emailTemplateSessionFactory"/>
    </bean>

    <!-- Mapper -->
    <bean id="emailMapper" class="com.junbo.email.db.mapper.EmailMapper"/>

    <!-- Sql Repository -->
    <bean id="emailSqlBaseRepository" class="com.junbo.email.db.repo.impl.sql.EmailBaseRepository" abstract="true">
        <property name="emailMapper" ref="emailMapper"/>
        <property name="idGenerator" ref="oculus48IdGenerator"/>
    </bean>
    <bean id="emailHistorySqlRepo" class="com.junbo.email.db.repo.impl.sql.EmailHistoryRepositorySqlImpl" parent="emailSqlBaseRepository">
        <property name="emailHistoryDao" ref="emailHistoryDao"/>
    </bean>
    <bean id="emailTemplateSqlRepo" class="com.junbo.email.db.repo.impl.sql.EmailTemplateRepositorySqlImpl" parent="emailSqlBaseRepository">
        <property name="emailTemplateDao" ref="emailTemplateDao"/>
    </bean>
    <bean id="emailScheduleSqlRepo" class="com.junbo.email.db.repo.impl.sql.EmailScheduleRepositorySqlImpl" parent="emailSqlBaseRepository">
        <property name="emailScheduleDao" ref="emailScheduleDao"/>
    </bean>
</beans>
