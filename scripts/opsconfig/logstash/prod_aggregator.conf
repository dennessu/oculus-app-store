input {
  redis {
    host => "127.0.0.1"
    type => "redis"
    data_type => "list"
    key => "logstash"
  }
}

filter {
  if [type] == "main_log_raw" {
    grok {
      match => {
        "message" => "(?m)\[%{DATA:timestamp}\]%{SPACE}%{WORD:severity}%{SPACE}%{INT:pid:int} \[%{SPACE}%{DATA:thread}\] \[%{SPACE}%{DATA:requestid}\]%{GREEDYDATA:message}"
      }
      overwrite => [ "message" ]
    }
  } else if [type] in [ "httpd_log_raw", "external_call_raw" ] {
    grok {
      match => {
        "message" => "(?:%{IPORHOST:clientip}|-) %{INT:response_time:int} (?:-|%{USER:auth}) \[%{DATA:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response_code:int} (?:%{NUMBER:bytes:int}|-) \"%{DATA:referer}\" \"%{DATA:user_agent}\"(?: \"\[%{DATA:headers}\]\"|) \[%{SPACE}%{DATA:requestid}\]"
      }
    }
    mutate {
      remove_field => [ "message" ]
    }
  }

  date {
    match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS Z" ]
    remove_field => [ "timestamp" ]
  }
  mutate {
    remove_field => [ "path" ]
    gsub => [
      # change type, trim end until first '_'
      "type", "_.*", ""
    ]
  }
}

output {
  stdout { }
  elasticsearch {
    cluster => "elasticsearch_prd"
  }
}
