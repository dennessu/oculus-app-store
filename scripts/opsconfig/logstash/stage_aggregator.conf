input {
  redis {
    host => "10.200.108.30"
    type => "redis"
    data_type => "list"
    key => "logstash"
  }
}

filter {
  if [type] == "main_log_raw" {
    grok {
      match => {
        "message" => "(?m)\[%{DATA:timestamp}\]%{SPACE}%{WORD:severity}%{SPACE}%{INT:pid}%{SPACE}\[%{SPACE}%{DATA:thread}\]%{SPACE}\[%{SPACE}%{DATA:requestid}\]%{GREEDYDATA:message}"
      }
      overwrite => [ "message" ]
    }
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS Z" ]
      remove_field => [ "timestamp" ]
    }
    mutate { replace => { type => "main" } }
  } else if [type] == "httpd_log_raw" {
    grok {
      match => {
        "message" => "(?:%{IPORHOST:clientip}|-) %{INT:response_time} %{USER:auth} \[%{DATA:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response_code} (?:%{NUMBER:bytes}|-) \"%{DATA:referer}\" \"%{DATA:user_agent}\" \"\[%{DATA:headers}\]\" \[%{SPACE}%{DATA:requestid}\]"
      }
    }
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS Z" ]
      remove_field => [ "timestamp" ]
    }
    mutate {
      remove_field => [ "message" ]
      replace => { type => "http" }
    }
  }
}

output {
  stdout { }
  elasticsearch {
    cluster => "elasticsearch_ppe"
  }
}
