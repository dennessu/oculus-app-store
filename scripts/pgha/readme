=====Envrionment Preparation=====
[Postgres Installation]
#server info
	os: ubuntu Linux
	account: silkcloud
	
#install postgresql
	sudo apt-get update
	sudo apt-get install -y postgresql-9.3
	
#create link
	sudo rm /usr/bin/psql
	sudo rm /usr/bin/dropdb
	sudo rm /usr/bin/createdb
	sudo ln -s /usr/lib/postgresql/9.3/bin/psql /usr/bin/psql
	sudo ln -s /usr/lib/postgresql/9.3/bin/pg_ctl /usr/bin/pg_ctl
	sudo ln -s /usr/lib/postgresql/9.3/bin/createdb /usr/bin/createdb
	sudo ln -s /usr/lib/postgresql/9.3/bin/dropdb /usr/bin/dropdb

#clean up exisitng db instance
	sudo kill $(fuser -n tcp 5432 2> /dev/null)
	sudo chown silkcloud /var/run/postgresql

[PGBouncer Installation]
	#sudo apt-get install -y pgbouncer

[SSH key]
	ssh-keygen -t rsa (no passphase)
	chmod 600 /home/silkcloud/.ssh/id_rsa*
	connect to the remote machine you want to login to, edit /home/silkcloud/.ssh/authorized_keys and append the content of id_rsa.pub file

=====Deloyment Preparation=====
#[bastion] enlish source tree
	https://github.com/junbo/main/tree/master/scripts/pgha

#[bastion] upload all PGHA scripts to master and slave servers
	./upload_script.sh

#[master] clean up master
	$DEPLOYMENT_PATH/purge_master.sh

#[slave] clean up slave
	$DEPLOYMENT_PATH/purge_slave.sh

=====Deployment=====
#[master] setup master database
	$DEPLOYMENT_PATH/setup_master.sh

#[master] full base backup master database
	$DEPLOYMENT_PATH/base_backup.sh

#[slave] setup slave database
	$DEPLOYMENT_PATH/setup_slave.sh

#[master] schedule archive log sync cron job
	$DEPLOYMENT_PATH/master_cron.sh

#[slave] schedule archive log sync cron job
	$DEPLOYMENT_PATH/slave_cron.sh

#[master] start primary PGBouncer proxy (connect to master db)
	$DEPLOYMENT_PATH/pgbouncer_master.sh

#[slave] start secondary PGBouncer proxy (connect to master db)
	$DEPLOYMENT_PATH/pgbouncer_master.sh

#[master/slave] replication smoke test
	$DEPLOYMENT_PATH/test_master2slave.sh

=====Planned Failover=====
#[slave] master failover to slave
	$DEPLOYMENT_PATH/failover.sh

#[master] start primary PGBouncer proxy (connect to slave db)
	$DEPLOYMENT_PATH/pgbouncer_slave.sh

#[slave] start secondary PGBouncer proxy (connect to slave db)
	$DEPLOYMENT_PATH/pgbouncer_slave.sh

#[master/slave] replication smoke test
	$DEPLOYMENT_PATH/test_slave2master.sh

#[master] slave failback to slave
	$DEPLOYMENT_PATH/failback.sh

#[master] start primary PGBouncer proxy (connect to master db)
	$DEPLOYMENT_PATH/pgbouncer_slave.sh

#[slave] start secondary PGBouncer proxy (connect to master db)
	$DEPLOYMENT_PATH/pgbouncer_slave.sh

#[master/slave] replication smoke test
	$DEPLOYMENT_PATH/test_master2slave.sh

=====Unplanned Failover=====
[SLAVE is broken]
#[master] full base backup master database
	$DEPLOYMENT_PATH/base_backup.sh

#[slave] setup slave database
	$DEPLOYMENT_PATH/setup_slave.sh

#[slave] schedule archive log sync cron job
	$DEPLOYMENT_PATH/slave_cron.sh

#[slave] start secondary PGBouncer proxy (connect to master db)
	$DEPLOYMENT_PATH/pgbouncer_master.sh

#[master/slave] replication smoke test
	$DEPLOYMENT_PATH/test_master2slave.sh

[MASTER is broken]
#[slave] promote slave to take traffic

#[bastion] switch master/slave configuration and re-generate scripts
	original slave -> master
	original master -> slave

# repeat normal replciation setup process
