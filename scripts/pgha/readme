=====Envrionment Preparation=====
[Postgres Installation]
#server info
    os: Ubuntu Linux

    linux accounts:
        [devops] used to install software, in sudo list
        [silkcloud] used to deployment PGHA, not included in sudo list

    postgresql user:
        [silkcloud] auto created by PGHA script

#install postgresql
    [devops] sudo apt-get update
    [devops] sudo apt-get install -y postgresql-9.3
    
#create link
    [devops] sudo rm /usr/bin/psql
    [devops] sudo rm /usr/bin/pg_ctl
    [devops] sudo rm /usr/bin/dropdb
    [devops] sudo rm /usr/bin/createdb

    [devops] sudo ln -s /usr/lib/postgresql/9.3/bin/psql /usr/bin/psql
    [devops] sudo ln -s /usr/lib/postgresql/9.3/bin/pg_ctl /usr/bin/pg_ctl
    [devops] sudo ln -s /usr/lib/postgresql/9.3/bin/createdb /usr/bin/createdb
    [devops] sudo ln -s /usr/lib/postgresql/9.3/bin/dropdb /usr/bin/dropdb

#clean up exisitng db instance
    [devops] sudo kill $(fuser -n tcp 5432 2> /dev/null)
    [devops] sudo chown silkcloud:silkcloud /var/run/postgresql
    [devops] clean up all files including hidden files in /var/run/postgresql

[PGBouncer Installation]
    [devops] sudo apt-get install -y pgbouncer

[Oidentd Installation]
    [devops] sudo apt-get install oidentd 
    [devops] /etc/init.d/oidentd start

[Skytool Londiste Installation]
    [devops] sudo apt-get install make
    [devops] sudo apt-get install gcc
    [devops] sudo apt-get install python-all
    [devops] sudo apt-get install python-dev
    [devops] sudo apt-get install python-psycopg2
    [devops] sudo apt-get install libpq-dev
    [devops] sudo apt-get install postgresql-server-dev-9.3

    [devops] wget http://pgfoundry.org/frs/download.php/3622/skytools-3.2.tar.gz -o /tmp/skytools-3.2.tar.gz
    [devops] ./configure --prefix=/usr/local
    [devops] sudo make
    [devops] sudo make install

[SSH key]
    [silkcloud] ssh-keygen -t rsa (no passphase)
    [silkcloud] chmod 600 /home/silkcloud/.ssh/id_rsa*
    [silkcloud] connect to the remote machine you want to login to, edit /home/silkcloud/.ssh/authorized_keys and append the content of id_rsa.pub file

[Open ports]
    `5432`: postgresql database port
    `6543`: pgbouncer proxy port
    `133`:  oident server port


=====Deloyment Preparation=====
#[bastion] enlish source tree
    [devops] https://github.com/junbo/main/tree/master/scripts/pgha

#[bastion] upload all PGHA scripts to master and slave servers
    [devops] ./upload_script.sh

#[master] clean up master
    [silkcloud] $DEPLOYMENT_PATH/purge/purge_master.sh

#[slave] clean up slave
    [silkcloud] $DEPLOYMENT_PATH/purge/purge_slave.sh

#[replica] clean up replica
    [silkcloud] $DEPLOYMENT_PATH/purge/purge_replica.sh

#[master/slave]
    [silkcloud] create pgbouncer auth file in ~/pgbouncer_auth.txt and chmod 600

#[master/slave] (FOR DEMO ONLY)
    [silkcloud] echo "*:6543:*:silkcloud:abc123" > ~/.pgpass
    [silkcloud] chmod 600 ~/.pgpass
    [silkcloud] echo '"silkcloud" "abc123"' > ~/pgbouncer_auth.txt


=====Master-Slave Deployment=====
#[master] setup master database
    $DEPLOYMENT_PATH/setup/setup_master.sh

#[master] run liquibase
    $DEPLOYMENT_PATH/test/test_liquibase_master.sh (FOR DEMO ONLY)

#[master] full base backup master database
    $DEPLOYMENT_PATH/util/base_backup.sh

#[slave] setup slave database
    $DEPLOYMENT_PATH/setup/setup_slave.sh

#[master] schedule archive log sync cron job
    $DEPLOYMENT_PATH/cron/cron_master.sh

#[slave] schedule archive log sync cron job
    $DEPLOYMENT_PATH/cron/cron_slave.sh

#[master] start primary PGBouncer proxy (connect to master db)
    $DEPLOYMENT_PATH/pgbouncer/pgbouncer_master.sh

#[slave] start secondary PGBouncer proxy (connect to master db)
    $DEPLOYMENT_PATH/pgbouncer/pgbouncer_master.sh

#[master/slave] replication smoke test
    $DEPLOYMENT_PATH/test/test_master2slave.sh

=====Master-Replica Deployment=====
#[master/slave] create londiste config on master/slave
    $DEPLOYMENT_PATH/londiste/londiste_config_root.sh

#[master] start londiste deamon on master
    $DEPLOYMENT_PATH/londiste/londiste_root.sh

#[master] start londiste pgq ticker deamon
    $DEPLOYMENT_PATH/londiste/lodiste_pgqd.sh

#[master] full base backup master database
    $DEPLOYMENT_PATH/util/base_backup.sh

#[replica] setup replica database
    $DEPLOYMENT_PATH/setup/setup_replica.sh

#[replica] create londiste config on replcia
    $DEPLOYMENT_PATH/londiste/londiste_config_leaf.sh

#[master] >>>>>>>>>>downtime window start<<<<<<<<<<

#[replica] start londiste deamon on replica
    $DEPLOYMENT_PATH/londiste/londiste_leaf.sh

#[replica] start londiste pgq ticker deamon
    $DEPLOYMENT_PATH/londiste/lodiste_pgqd.sh

#[master] >>>>>>>>>>>downtime window end<<<<<<<<<<<


=====Planned Failover=====
#[slave] master failover to slave
    $DEPLOYMENT_PATH/switchover/failover.sh

#[master] start primary PGBouncer proxy (connect to slave db)
    $DEPLOYMENT_PATH/pgbouncer/pgbouncer_slave.sh

#[slave] start secondary PGBouncer proxy (connect to slave db)
    $DEPLOYMENT_PATH/pgbouncer/pgbouncer_slave.sh

#[master/slave] replication smoke test
    $DEPLOYMENT_PATH/test/test_slave2master.sh

#[master] slave failback to master
    $DEPLOYMENT_PATH/switchover/failback.sh

#[master] start primary PGBouncer proxy (connect to master db)
    $DEPLOYMENT_PATH/pgbouncer/pgbouncer_master.sh

#[slave] start secondary PGBouncer proxy (connect to master db)
    $DEPLOYMENT_PATH/pgbouner/pgbouncer_master.sh

#[master/slave] replication smoke test
    $DEPLOYMENT_PATH/test/test_master2slave.sh


=====Unplanned Failover=====
[SLAVE is broken]
#[master] full base backup master database
    $DEPLOYMENT_PATH/util/base_backup.sh

#[slave] setup slave database
    $DEPLOYMENT_PATH/setup/setup_slave.sh

#[slave] schedule archive log sync cron job
    $DEPLOYMENT_PATH/cron/cron_slave.sh

#[slave] start secondary PGBouncer proxy (connect to master db)
    $DEPLOYMENT_PATH/pgbouncer/pgbouncer_master.sh

#[master/slave] replication smoke test
    $DEPLOYMENT_PATH/test/test_master2slave.sh

[MASTER is broken]
#[slave] promote slave to take traffic

#[bastion] switch master/slave configuration and re-generate scripts
    original slave -> master
    original master -> slave

#repeat normal replciation setup process

=====Release Memo=====
# Londiste doesn't support DDL replication, liquibase scripts should be first run against REPLICA then MASTER
# Liquibase change log related tables should not be published for replication
# Londiste doc: https://github.com/markokr/skytools/blob/master/doc/londiste3.txt

