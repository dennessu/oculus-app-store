=====Envrionment Preparation=====
[Server Preparation]
#server info
    os: Ubuntu Linux

    linux accounts:
        [devops] used to install software, in sudo list
        [silkcloud] used to deployment PGHA, not included in sudo list
        [scro] used for database livesite, created on replica database only

    postgresql user:
        [silkcloud] auto created by PGHA script

#create PGHA base direcotry
    [devops] sudo mkdir -p /var/silkcloud
    [devops] sudo chown silkcloud:silkcloud /var/silkcloud

[Postgres Installation]
#install postgresql
    [devops] sudo apt-get update
    [devops] sudo apt-get install -y postgresql-9.3
    
#create link
    [devops] sudo ln -sf /usr/lib/postgresql/9.3/bin/psql /usr/bin/psql
    [devops] sudo ln -sf /usr/lib/postgresql/9.3/bin/pg_ctl /usr/bin/pg_ctl
    [devops] sudo ln -sf /usr/lib/postgresql/9.3/bin/createdb /usr/bin/createdb
    [devops] sudo ln -sf /usr/lib/postgresql/9.3/bin/dropdb /usr/bin/dropdb

#clean up exisitng db instance
    [devops] sudo rm -rf /etc/init.d/postgresql
    [devops] sudo kill $(sudo fuser -n tcp 5432 2> /dev/null)
    [devops] sudo chown silkcloud:silkcloud /var/run/postgresql
    [devops] clean up all files including hidden files in /var/run/postgresql

[PGBouncer Installation]
    [devops] sudo apt-get install -y pgbouncer

[Oidentd Installation]
    [devops] sudo apt-get install oidentd 
    [devops] /etc/init.d/oidentd start

[Skytool Londiste Installation]
    [devops] sudo apt-get install -y make
    [devops] sudo apt-get install -y gcc
    [devops] sudo apt-get install -y python-all
    [devops] sudo apt-get install -y python-dev
    [devops] sudo apt-get install -y python-psycopg2
    [devops] sudo apt-get install -y libpq-dev
    [devops] sudo apt-get install -y postgresql-server-dev-9.3

    [devops] pushd /tmp && wget http://pgfoundry.org/frs/download.php/3622/skytools-3.2.tar.gz
    [devops] sudo ./configure --prefix=/usr/local
    [devops] sudo make
    [devops] sudo make install

[SSH key]
    [silkcloud] ssh-keygen -t rsa (no passphase)
    [silkcloud] chmod 600 /home/silkcloud/.ssh/id_rsa*
    [silkcloud] ssh-copy-id username@hostname
        connect to the remote machine you want to login to, edit /home/silkcloud/.ssh/authorized_keys and append the content of id_rsa.pub file

[Open ports]
    `5432`: postgresql database port
    `6543`: pgbouncer proxy port
    `113`:  oident server port


=====Deloyment Preparation=====
#[bastion] enlish source tree
    [silkcloud] https://github.com/junbo/main/tree/master/scripts/pgha

#[bastion] upload all PGHA scripts to master/slave/replica servers
    [silkcloud] ./upload_script.sh

#[master] clean up master
    [silkcloud] $DEPLOYMENT_PATH/purge/purge_master.sh

#[slave] clean up slave
    [silkcloud] $DEPLOYMENT_PATH/purge/purge_slave.sh

#[bcp] clean up bcp
    [silkcloud] $DEPLOYMENT_PATH/purge/purge_bcp.sh

#[replica] clean up replica
    [silkcloud] $DEPLOYMENT_PATH/purge/purge_replica.sh

#[master/slave/replica/bcp]
    [silkcloud] create pgbouncer auth file in ~/.pgbouncer_auth and chmod 600

#[master/slave/replica/bcp]
    [silkcloud] generate md5 password: "md5" + md5(password + username)
    [silkcloud] echo '"silkcloud" "PASSWORD"' > ~/.pgbouncer_auth


=====Master-Slave/BCP Deployment=====
#[master] setup master database
    $DEPLOYMENT_PATH/setup/setup_master.sh

#[master] run liquibase script

#[master] setup londiste root
    $DEPLOYMENT_PATH/londiste/londiste_root.sh

#[master] full base backup master database
    $DEPLOYMENT_PATH/util/base_backup.sh

#[slave] setup slave database
    $DEPLOYMENT_PATH/setup/setup_slave.sh

#[bcp] setup bcp database
    $DEPLOYMENT_PATH/setup/setup_bcp.sh

=====Master-Replica Deployment=====
#[master] full base backup master database
    $DEPLOYMENT_PATH/util/base_backup.sh

#[replica] setup replica database
    $DEPLOYMENT_PATH/setup/setup_replica.sh

#[master][smoketest] replication smoke test
    $DEPLOYMENT_PATH/test/test_master2slave.sh


=====Planned Failover=====
#[slave] master failover to slave
    $DEPLOYMENT_PATH/switchover/failover.sh

#[slave][smoketest] replication smoke test
    $DEPLOYMENT_PATH/test/test_slave2master.sh

#[master] slave failback to master
    $DEPLOYMENT_PATH/switchover/failback.sh

#[master][smoketest] replication smoke test
    $DEPLOYMENT_PATH/test/test_master2slave.sh


=====Unplanned Failover=====
[SLAVE is broken]
#[master] full base backup master database
    $DEPLOYMENT_PATH/util/base_backup.sh

#[slave] setup slave database
    $DEPLOYMENT_PATH/setup/setup_slave.sh

#[slave] start secondary PGBouncer proxy (connect to master db)
    $DEPLOYMENT_PATH/pgbouncer/pgbouncer_master.sh

#[master] replication smoke test
    $DEPLOYMENT_PATH/test/test_master2slave.sh

[MASTER is broken]
#[slave] promote slave to take traffic

#[bastion] switch master/slave configuration and refresh scripts
    original slave -> master
    original master -> slave

#repeat normal replciation setup process

=====Release Memo=====
# Londiste doesn't support DDL replication, liquibase scripts should be first run against REPLICA then MASTER
# Liquibase change log related tables should not be published for replication
# Londiste doc: https://github.com/markokr/skytools/blob/master/doc/londiste3.txt

