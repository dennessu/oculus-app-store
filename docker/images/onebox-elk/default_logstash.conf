input {
  file {
    path => [ "/inputlogs/main.log" ]
    codec => multiline {
      pattern => "^\s"
      what => "previous"
    }
    path => [ "/inputlogs/httpd.log" ]
    codec => multiline {
      pattern => "^\s"
      what => "previous"
    }
    start_position => beginning
  }
}

filter {
  if [path] =~ "main" {
    mutate { replace => { type => "main_log" } }
    grok {
      match => {"message" => "%{SYSLOG5424SD:timestamp} %{WORD:severity} %{INT:pid} %{SYSLOG5424SD:thread} %{SYSLOG5424SD:requestid}%{GREEDYDATA:additionalgmessage}"}
    }
    multiline {
      pattern => "^\s"
      what => "previous"
    }
  } else if [path] =~ "httpd" {
    mutate { replace => { type => "httpd_log" } }
    grok {
      match => {"message" => "%{IPORHOST:clientip} %{USER:ident} %{USER:auth} %{SYSLOG5424SD} \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-)"}
    }
  } else {
    mutate { replace => { type => "random_log" } }
  }
}

output {
  stdout { }
  elasticsearch { embedded => true }
}
