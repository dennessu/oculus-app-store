input {
  file {
    path => [ "/inputlogs/main.log" ]
    codec => multiline {
      pattern => "^\["
      what => "previous"
      negate => true
    }
    type => "main_log_raw"
    start_position => beginning
    sincedb_path => "/var/elk/logstash/data/.mainsincedb"
    sincedb_write_interval => 15
    stat_interval => 5
  }

  file {
    path => [ "/inputlogs/httpd.log" ]
    type => "httpd_log_raw"
    start_position => beginning
    sincedb_path => "/var/elk/logstash/data/.httpdsincedb"
    sincedb_write_interval => 15
    stat_interval => 5
  }
  file {
    path => [ "/inputlogs/external_call.log" ]
    type => "external_call_raw"
    start_position => beginning
    sincedb_path => "/var/elk/logstash/data/.externalsincedb"
    sincedb_write_interval => 15
    stat_interval => 5
  }
}

filter {
  if [type] == "main_log_raw" {
    grok {
      match => {
        "message" => "(?m)\[%{DATA:timestamp}\]%{SPACE}%{WORD:severity}%{SPACE}%{INT:pid}%{SPACE}\[%{SPACE}%{DATA:thread}\]%{SPACE}\[%{SPACE}%{DATA:requestid}\]%{GREEDYDATA:message}"
      }
      overwrite => [ "message" ]
    }
  } else if [type] in [ "httpd_log_raw", "external_call_raw" ] {
    grok {
      match => {
        "message" => "(?:%{IPORHOST:clientip}|-) %{INT:response_time} %{USER:auth} \[%{DATA:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response_code} (?:%{NUMBER:bytes}|-) \"%{DATA:referer}\" \"%{DATA:user_agent}\" \"\[%{DATA:headers}\]\" \[%{SPACE}%{DATA:requestid}\]"
      }
    }
    mutate {
      remove_field => [ "message" ]
    }
  }

  date {
    match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS Z" ]
    remove_field => [ "timestamp" ]
  }
  mutate {
    remove_field => [ "path" ]
    gsub => [
      # change type, trim end until first '_'
      "type", "_.*", ""
    ]
  }
}

output {
  stdout { }
  elasticsearch { embedded => true }
}
